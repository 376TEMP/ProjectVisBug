class Channel {
  constructor({name, model}) {
    this._port      = chrome.runtime.connect({ name });
    this._message   = chrome.runtime;
    this._model     = model;

    this.post({action: 'register'});
  }

  post(data) {
    this._port.postMessage(
      Object.assign(this._model, { data }));
  }

  message(data) {
    this._message.postMessage(
      Object.assign(this._model, { data }));
  }

  get port() {
    return this._port
  }

  get message() {
    return this._message
  }
}

var pallete           = document.createElement('tool-pallete');
const channel_name    = 'design-artboard';
const appendPallete   = () => document.body.prepend(pallete);

const Pipe = new Channel({
  name: channel_name,
  model: {
    src_channel:    channel_name,
    target_channel: 'design-panel',
  }
});

const layersFromDOM = node => 
  [tree] = [node].map(({nodeName, className, id}) => {
    const attr = { nodeName, className, id };

    if (node.children.length)
      attr.children = [...node.children].map(layersFromDOM);

    return attr
  });

// append and watch toolbar selections
appendPallete();
pallete.selectorEngine.onSelectedUpdate(nodes =>
  Pipe.post(nodes.map(layersFromDOM)));

// watch pipe messages (they'll be auto filtered for this pipe)
Pipe.port.onMessage.addListener(message => {
  console.log(`${channel_name} recieved port message`, message);
});

Pipe.message.onMessage.addListener((request, sender, sendResponse) => {
  console.log(`${channel_name} onMessage`, request);

  const { action, params } = request;

  // only respond to toolSelection atm
  if (action != 'toolSelected') return

  const [pallete] = document.getElementsByTagName('tool-pallete');
  pallete && pallete[action](params);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZXMiOlsiLi4vdXRpbHMvY2hhbm5lbC5qcyIsImluamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFubmVsIHtcbiAgY29uc3RydWN0b3Ioe25hbWUsIG1vZGVsfSkge1xuICAgIHRoaXMuX3BvcnQgICAgICA9IGNocm9tZS5ydW50aW1lLmNvbm5lY3QoeyBuYW1lIH0pXG4gICAgdGhpcy5fbWVzc2FnZSAgID0gY2hyb21lLnJ1bnRpbWVcbiAgICB0aGlzLl9tb2RlbCAgICAgPSBtb2RlbFxuXG4gICAgdGhpcy5wb3N0KHthY3Rpb246ICdyZWdpc3Rlcid9KVxuICB9XG5cbiAgcG9zdChkYXRhKSB7XG4gICAgdGhpcy5fcG9ydC5wb3N0TWVzc2FnZShcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbW9kZWwsIHsgZGF0YSB9KSlcbiAgfVxuXG4gIG1lc3NhZ2UoZGF0YSkge1xuICAgIHRoaXMuX21lc3NhZ2UucG9zdE1lc3NhZ2UoXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuX21vZGVsLCB7IGRhdGEgfSkpXG4gIH1cblxuICBnZXQgcG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9ydFxuICB9XG5cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VcbiAgfVxufSIsImltcG9ydCBDaGFubmVsIGZyb20gJy4uL3V0aWxzL2NoYW5uZWwuanMnXG5cbnZhciBwYWxsZXRlICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rvb2wtcGFsbGV0ZScpXG5jb25zdCBjaGFubmVsX25hbWUgICAgPSAnZGVzaWduLWFydGJvYXJkJ1xuY29uc3QgYXBwZW5kUGFsbGV0ZSAgID0gKCkgPT4gZG9jdW1lbnQuYm9keS5wcmVwZW5kKHBhbGxldGUpXG5cbmNvbnN0IFBpcGUgPSBuZXcgQ2hhbm5lbCh7XG4gIG5hbWU6IGNoYW5uZWxfbmFtZSxcbiAgbW9kZWw6IHtcbiAgICBzcmNfY2hhbm5lbDogICAgY2hhbm5lbF9uYW1lLFxuICAgIHRhcmdldF9jaGFubmVsOiAnZGVzaWduLXBhbmVsJyxcbiAgfVxufSlcblxuY29uc3QgbGF5ZXJzRnJvbURPTSA9IG5vZGUgPT4gXG4gIFt0cmVlXSA9IFtub2RlXS5tYXAoKHtub2RlTmFtZSwgY2xhc3NOYW1lLCBpZH0pID0+IHtcbiAgICBjb25zdCBhdHRyID0geyBub2RlTmFtZSwgY2xhc3NOYW1lLCBpZCB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICBhdHRyLmNoaWxkcmVuID0gWy4uLm5vZGUuY2hpbGRyZW5dLm1hcChsYXllcnNGcm9tRE9NKVxuXG4gICAgcmV0dXJuIGF0dHJcbiAgfSlcblxuLy8gYXBwZW5kIGFuZCB3YXRjaCB0b29sYmFyIHNlbGVjdGlvbnNcbmFwcGVuZFBhbGxldGUoKVxucGFsbGV0ZS5zZWxlY3RvckVuZ2luZS5vblNlbGVjdGVkVXBkYXRlKG5vZGVzID0+XG4gIFBpcGUucG9zdChub2Rlcy5tYXAobGF5ZXJzRnJvbURPTSkpKVxuXG4vLyB3YXRjaCBwaXBlIG1lc3NhZ2VzICh0aGV5J2xsIGJlIGF1dG8gZmlsdGVyZWQgZm9yIHRoaXMgcGlwZSlcblBpcGUucG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIobWVzc2FnZSA9PiB7XG4gIGNvbnNvbGUubG9nKGAke2NoYW5uZWxfbmFtZX0gcmVjaWV2ZWQgcG9ydCBtZXNzYWdlYCwgbWVzc2FnZSlcbn0pXG5cblBpcGUubWVzc2FnZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gIGNvbnNvbGUubG9nKGAke2NoYW5uZWxfbmFtZX0gb25NZXNzYWdlYCwgcmVxdWVzdClcblxuICBjb25zdCB7IGFjdGlvbiwgcGFyYW1zIH0gPSByZXF1ZXN0XG5cbiAgLy8gb25seSByZXNwb25kIHRvIHRvb2xTZWxlY3Rpb24gYXRtXG4gIGlmIChhY3Rpb24gIT0gJ3Rvb2xTZWxlY3RlZCcpIHJldHVyblxuXG4gIGNvbnN0IFtwYWxsZXRlXSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0b29sLXBhbGxldGUnKVxuICBwYWxsZXRlICYmIHBhbGxldGVbYWN0aW9uXShwYXJhbXMpXG59KVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFlLE1BQU0sT0FBTyxDQUFDO0VBQzNCLFdBQVcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtJQUN6QixJQUFJLENBQUMsS0FBSyxRQUFRLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUM7SUFDbEQsSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsUUFBTztJQUNoQyxJQUFJLENBQUMsTUFBTSxPQUFPLE1BQUs7O0lBRXZCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUM7R0FDaEM7O0VBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtJQUNULElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVztNQUNwQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFDO0dBQ3hDOztFQUVELE9BQU8sQ0FBQyxJQUFJLEVBQUU7SUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVc7TUFDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQztHQUN4Qzs7RUFFRCxJQUFJLElBQUksR0FBRztJQUNULE9BQU8sSUFBSSxDQUFDLEtBQUs7R0FDbEI7O0VBRUQsSUFBSSxPQUFPLEdBQUc7SUFDWixPQUFPLElBQUksQ0FBQyxRQUFRO0dBQ3JCOzs7Q0FDRixEQ3hCRCxJQUFJLE9BQU8sYUFBYSxRQUFRLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBQztBQUM5RCxNQUFNLFlBQVksTUFBTSxrQkFBaUI7QUFDekMsTUFBTSxhQUFhLEtBQUssTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUM7O0FBRTVELE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDO0VBQ3ZCLElBQUksRUFBRSxZQUFZO0VBQ2xCLEtBQUssRUFBRTtJQUNMLFdBQVcsS0FBSyxZQUFZO0lBQzVCLGNBQWMsRUFBRSxjQUFjO0dBQy9CO0NBQ0YsRUFBQzs7QUFFRixNQUFNLGFBQWEsR0FBRyxJQUFJO0VBQ3hCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEtBQUs7SUFDakQsTUFBTSxJQUFJLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRTs7SUFFeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU07TUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUM7O0lBRXZELE9BQU8sSUFBSTtHQUNaLEVBQUM7OztBQUdKLGFBQWEsR0FBRTtBQUNmLE9BQU8sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsS0FBSztFQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQzs7O0FBR3RDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUk7RUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsT0FBTyxFQUFDO0NBQzlELEVBQUM7O0FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEtBQUs7RUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sRUFBQzs7RUFFakQsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFPOzs7RUFHbEMsSUFBSSxNQUFNLElBQUksY0FBYyxFQUFFLE1BQU07O0VBRXBDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsY0FBYyxFQUFDO0VBQy9ELE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFDO0NBQ25DLENBQUMifQ==
